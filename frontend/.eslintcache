[{"/mnt/c/Users/Chris/Desktop/statify/frontend/src/index.js":"1","/mnt/c/Users/Chris/Desktop/statify/frontend/src/reportWebVitals.js":"2","/mnt/c/Users/Chris/Desktop/statify/frontend/src/App.js":"3","/mnt/c/Users/Chris/Desktop/statify/frontend/src/util/spotify_api_util.js":"4","/mnt/c/Users/Chris/Desktop/statify/frontend/src/actions/spotify_actions.js":"5","/mnt/c/Users/Chris/Desktop/statify/frontend/src/store/store.js":"6","/mnt/c/Users/Chris/Desktop/statify/frontend/src/reducers/root_reducer.js":"7","/mnt/c/Users/Chris/Desktop/statify/frontend/src/reducers/spotify_reducer.js":"8","/mnt/c/Users/Chris/Desktop/statify/frontend/src/reducers/session_reducer.js":"9","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/dataSelector/dataSelector.jsx":"10","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/graph/graph_container.js":"11","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/graph/graph.jsx":"12","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/dataSelector/dataSelector_container.js":"13","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/splash/splash.jsx":"14","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/graph/dynoGraph.jsx":"15"},{"size":864,"mtime":1608764948857,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1608064614237,"results":"18","hashOfConfig":"17"},{"size":3640,"mtime":1610148503361,"results":"19","hashOfConfig":"17"},{"size":120,"mtime":1608661783740,"results":"20","hashOfConfig":"17"},{"size":3226,"mtime":1610136059972,"results":"21","hashOfConfig":"17"},{"size":528,"mtime":1608764948918,"results":"22","hashOfConfig":"17"},{"size":224,"mtime":1608764948878,"results":"23","hashOfConfig":"17"},{"size":688,"mtime":1610046580033,"results":"24","hashOfConfig":"17"},{"size":538,"mtime":1610136182434,"results":"25","hashOfConfig":"17"},{"size":2774,"mtime":1610090171850,"results":"26","hashOfConfig":"17"},{"size":200,"mtime":1610046788132,"results":"27","hashOfConfig":"17"},{"size":7167,"mtime":1610089233430,"results":"28","hashOfConfig":"17"},{"size":721,"mtime":1610047895564,"results":"29","hashOfConfig":"17"},{"size":429,"mtime":1610071713977,"results":"30","hashOfConfig":"17"},{"size":2862,"mtime":1610129754409,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"15rnbo5",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"/mnt/c/Users/Chris/Desktop/statify/frontend/src/index.js",[],["70","71"],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/reportWebVitals.js",[],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/App.js",["72","73"],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/util/spotify_api_util.js",[],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/actions/spotify_actions.js",["74"],"\r\nimport SpotifyWebApi from 'spotify-web-api-js';\r\nimport spotifyApi from '../util/spotify_api_util'\r\n\r\nexport const LOGIN = \"LOGIN\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const RECEIVE_TRACKS = \"RECEIVE_TRACKS\";\r\nexport const RECEIVE_PLAYLISTS = \"RECEIVE_PLAYLISTS\";\r\nexport const RECEIVE_FEATURES = \"RECEIVE_FEATURES\";\r\nexport const RECCEIVE_TRACKS = \"RECCEIVE_TRACKS\";\r\nexport const RECEIVE_USER_DATA = \"RECEIVE_USER_DATA\";\r\n\r\n\r\nexport const login = accessToken => {\r\n    return ({\r\n    type: LOGIN,\r\n    accessToken\r\n})};\r\n\r\nexport const receiveUserData = userData => {\r\n    return ({\r\n    type: RECEIVE_USER_DATA,\r\n    userData\r\n})};\r\n\r\nexport const logout = () => ({\r\n  type: LOGOUT,\r\n})\r\n\r\nexport const receiveFeatures = features => {\r\n    return ({\r\n    type: RECEIVE_FEATURES,\r\n    features\r\n})};\r\n\r\nexport const receivePlaylists = playlists => {\r\n    return ({\r\n    type: RECEIVE_PLAYLISTS,\r\n    playlists\r\n})};\r\n\r\nexport const receiveTracks = tracks => {\r\n    return ({\r\n    type: RECEIVE_TRACKS,\r\n    tracks\r\n})};\r\n\r\nexport const setAccessToken = accessToken => dispatch => {\r\n    spotifyApi.setAccessToken(accessToken)\r\n    dispatch(login(accessToken))\r\n    spotifyApi.getMe()\r\n     .then(res => {\r\n       dispatch(receiveUserData({\r\n         username: res.display_name,\r\n         profpic: res.images[0].url\r\n       }))\r\n      })\r\n}\r\n\r\nexport const requestPlaylists = () => dispatch => {\r\n  spotifyApi.getUserPlaylists({limit: 50})\r\n    .then(res => {\r\n      let playlists = {}\r\n      res.items.forEach(x => {\r\n        playlists[x.name] = x.id\r\n      })\r\n      dispatch(receivePlaylists(playlists))\r\n    })\r\n}\r\n\r\n\r\nexport const requestTopTracks = timeRange => dispatch => {\r\n    spotifyApi.getMyTopTracks({limit: 50, time_range: timeRange})\r\n      .then(res => {\r\n        dispatch(receiveTracks(res.items));\r\n        let trackIds = [];\r\n        res.items.forEach(item => {\r\n            trackIds.push(item.id)\r\n        });\r\n        dispatch(requestFeatures(trackIds))\r\n      });\r\n}\r\n\r\nexport const requestPlaylistItems = playlistId => dispatch => {\r\n  spotifyApi.getPlaylistTracks(playlistId)\r\n    .then(res => {\r\n      dispatch(receiveTracks(res.items));\r\n      let trackIds = [];\r\n      res.items.forEach(item => {\r\n          trackIds.push(item.track.id)\r\n      });\r\n      dispatch(requestFeatures(trackIds))\r\n    });\r\n}\r\n\r\nexport const requestMostRecent = () => dispatch => {\r\n    spotifyApi.getMyRecentlyPlayedTracks({limit: 50})\r\n      .then(res => {\r\n        dispatch(receiveTracks(res.items));\r\n        let trackIds = [];\r\n        res.items.forEach(item => {\r\n            trackIds.push(item.track.id)\r\n        });\r\n        dispatch(requestFeatures(trackIds))\r\n      })\r\n};\r\n\r\nexport const requestMySaved = () => dispatch => {\r\n    spotifyApi.getMySavedTracks({limit: 50})\r\n      .then(res => {\r\n        dispatch(receiveTracks(res.items));\r\n        let trackIds = [];\r\n        res.items.forEach(item => {\r\n            trackIds.push(item.track.id)\r\n        });\r\n        dispatch(requestFeatures(trackIds))\r\n      })\r\n};\r\n\r\nconst requestFeatures = trackIds => dispatch => {\r\n    spotifyApi.getAudioFeaturesForTracks(trackIds)\r\n      .then(res => {\r\n        dispatch(receiveFeatures(res.audio_features))})\r\n}","/mnt/c/Users/Chris/Desktop/statify/frontend/src/store/store.js",[],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/reducers/root_reducer.js",[],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/reducers/spotify_reducer.js",["75"],"import {RECEIVE_FEATURES, RECEIVE_PLAYLISTS, RECEIVE_TRACKS} from '../actions/spotify_actions'\r\n\r\nconst initialState = {\r\n    features: [],\r\n    tracks: {},\r\n    playlists: {}\r\n    };\r\n\r\nexport default (state = initialState, action) => {\r\n    let newState = Object.assign({}, state);\r\n    switch (action.type) {\r\n        case RECEIVE_FEATURES:\r\n            newState.features = action.features\r\n            return newState;\r\n        case RECEIVE_TRACKS:\r\n            newState.tracks = action.tracks\r\n            return newState;\r\n        case RECEIVE_PLAYLISTS:\r\n        newState.playlists = action.playlists\r\n        return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}","/mnt/c/Users/Chris/Desktop/statify/frontend/src/reducers/session_reducer.js",["76"],"\r\nimport { LOGIN, LOGOUT, RECEIVE_USER_DATA } from '../actions/spotify_actions';\r\n\r\nconst initialState = {\r\nisAuthenticated: false,\r\naccessToken: {},\r\nusername: '',\r\nprofpic: ''\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\nswitch (action.type) {\r\n  case LOGIN:\r\n    return {\r\n      isAuthenticated: true,\r\n      accessToken: action.accessToken\r\n    }\r\n  case RECEIVE_USER_DATA:\r\n    return Object.assign({}, state, action.userData)\r\n  \r\n    case LOGOUT:\r\n      return initialState\r\n\r\n  default:\r\n    return state;\r\n}\r\n}","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/dataSelector/dataSelector.jsx",["77","78"],"import React from 'react';\r\nimport spotifyApi from '../../util/spotify_api_util'\r\nimport Graph from '../graph/graph_container';\r\n\r\nexport default class DataSelector extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: 'top',\r\n            time: 'medium_term'\r\n        };\r\n        this.getData = this.getData.bind(this);\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.props.requestPlaylists()\r\n    }\r\n\r\n    dataChange (e) {\r\n        this.setState({data: e.target.value})\r\n    }\r\n    timeChange (e) {\r\n        this.setState({time: e.target.value})\r\n    }\r\n\r\n    getData () {\r\n        switch (this.state.data) {\r\n            case 'recent':\r\n                console.log('looking for recent data')\r\n                this.props.requestMostRecent(this.state.time)\r\n                \r\n                break;\r\n            case 'top':\r\n                console.log('looking for top data')\r\n                this.props.requestTopTracks(this.state.time)\r\n                break;\r\n            case 'liked':\r\n                console.log('looking for liked data')\r\n                this.props.requestMySaved(this.state.time)\r\n                break;\r\n        \r\n            default:\r\n                this.props.requestPlaylistItems(this.state.data)\r\n                break;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        this.getData()\r\n\r\n        const playlistOptions = Object.keys(this.props.playlists).map((k) => (\r\n            <option value={this.props.playlists[k]}>{k}</option>\r\n        ))\r\n        return (\r\n            <>\r\n            <div className='dataSelector'> \r\n                <p>Based on your</p>\r\n               \r\n                <select onChange={this.dataChange.bind(this)} value={this.state.data}>\r\n                    <option value=\"top\">Top Tracks</option>\r\n                    <option value=\"recent\">Most Recent Tracks</option>\r\n                    <option value=\"liked\">Liked Tracks</option>\r\n                    <option value=\"playlist\" disabled>— Playlists —</option>\r\n                    {playlistOptions}\r\n                </select>\r\n                {this.state.data.length > 9 ? (\r\n                    <p>playlist</p>\r\n                ) : null }\r\n                {this.state.data === 'top' ? (\r\n                    <>\r\n                    <p>from the past </p>\r\n                    <select onChange={this.timeChange.bind(this)} value={this.state.time}>\r\n                    <option value=\"short_term\">4 weeks</option>\r\n                    <option value=\"medium_term\">6 months</option>\r\n                    <option value=\"long_term\">All time</option>\r\n                    </select>\r\n                    </>\r\n                ) : null}\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/graph/graph_container.js",[],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/graph/graph.jsx",["79","80"],"import React from 'react';\r\nimport { Doughnut, Bar } from 'react-chartjs-2';\r\n import DynoGraph from './dynoGraph';\r\nexport default class Graph extends React.Component {\r\n    \r\n\r\n    render ()  {\r\n        if (!this.props.data) return null;\r\n\r\n\r\n        let keys = [0,0,0,0,0,0,0,0,0,0,0,0];\r\n        const keyArr = ['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B',];\r\n        let modes = [0,0];\r\n        let tempos = {};\r\n        for (let i = 40; i < 241; i += 10) tempos[i] = 0;\r\n\r\n\r\n        //\r\n        let acousticness = new Array(20).fill(0);\r\n        let danceability = new Array(20).fill(0);\r\n        let energy = new Array(20).fill(0);\r\n        let instrumentalness = new Array(20).fill(0);\r\n        let liveness = new Array(20).fill(0);\r\n        let speechiness = new Array(20).fill(0);\r\n        let valence = new Array(20).fill(0);\r\n\r\n        let loudness = new Array(20).fill(0); //roughly -30 to 0\r\n        let duaration = new Array(20).fill(0);//in ms\r\n\r\n\r\n        const zeroFive = n => {  //.169\r\n            n = Math.floor(n * 100)   //16\r\n            n -= (n % 5)  //15\r\n            return (n / 5);\r\n        }\r\n        //main iterator\r\n        this.props.data.forEach(x => {\r\n            if (!x) {\r\n            } else {\r\n                keys[x.key] += 1;\r\n                modes[x.mode] += 1;\r\n                let tempo = Math.floor(x.tempo);\r\n                tempo -= (tempo % 10)\r\n                tempos[tempo] += 1\r\n\r\n                acousticness[zeroFive(x.acousticness)]++;\r\n                danceability[zeroFive(x.danceability)]++;\r\n                energy[zeroFive(x.energy)]++;\r\n                instrumentalness[zeroFive(x.instrumentalness)]++;\r\n                liveness[zeroFive(x.liveness)]++;\r\n                speechiness[zeroFive(x.speechiness)]++;\r\n                valence[zeroFive(x.valence)]++;\r\n            }\r\n\r\n        });\r\n        const dynoData = {\r\n            acousticness,\r\n            danceability,\r\n            energy,\r\n            instrumentalness,\r\n            liveness,\r\n            speechiness,\r\n            valence\r\n        }\r\n\r\n        //graph datasets\r\n        const keyData = {\r\n            labels: keyArr,\r\n            datasets: [{\r\n                data: keys,\r\n                backgroundColor: [\r\n                    '#e6194B',\r\n                    '#f58231',\r\n                    '#ffe119',\r\n                    '#bfef45',\r\n                    '#3cb44b',\r\n                    '#469990',\r\n                    '#42d4f4',\r\n                    '#4363d8',\r\n                    '#000075',\r\n                    '#911eb4',\r\n                    '#f032e6',\r\n                    '#b20035',\r\n                  ],\r\n            }]\r\n        };\r\n\r\n        const modeData = {\r\n            labels: ['Major', 'Minor'],\r\n            datasets: [{\r\n                data: modes,\r\n                backgroundColor: [\r\n                    '#e6194B',\r\n                    '#4363d8',\r\n                ]\r\n            }]\r\n        };\r\n        \r\n        //TODO move gradient WETness\r\n        var canvas = document.createElement('canvas');\r\n        var context = canvas.getContext('2d')\r\n        canvas.width = 300;\r\n        canvas.height = 300;\r\n        var gradient = context.createLinearGradient(0, 0, 300, 0);\r\n        gradient.addColorStop(0, \"rgb(0, 77, 255)\");\r\n        gradient.addColorStop(0.5505050505050505, \"rgb(114, 255, 86)\");\r\n        gradient.addColorStop(1, \"rgb(255, 20, 20)\");\r\n        context.fillStyle = gradient;\r\n        context.fillRect(0, 0, 300, 300);\r\n\r\n\r\n        const tempoData = {\r\n            labels: [40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220],\r\n            datasets: [{\r\n                data: Object.values(tempos),\r\n                backgroundColor: gradient\r\n            }]\r\n        };\r\n\r\n        //graph option objects\r\n        const modeOptions = {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        suggestedMax: 10\r\n                    }\r\n                }]\r\n            },\r\n            responsive: false,\r\n            maintainAspectRatio: true,\r\n            legend: {\r\n                display: false   \r\n                }\r\n        };\r\n\r\n        const tempoOptions = {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        suggestedMax: 10\r\n                    }\r\n                }]\r\n            },\r\n            responsive: false,\r\n            maintainAspectRatio: true,\r\n            legend: {\r\n                display: false   \r\n                }\r\n        };\r\n        \r\n\r\n        //get average modes\r\n        const findIndexOfGreatest = (array) => {\r\n            var greatest;\r\n            var indexOfGreatest;\r\n            for (var i = 0; i < array.length; i++) {\r\n              if (!greatest || array[i] > greatest) {\r\n                greatest = array[i];\r\n                indexOfGreatest = i;\r\n              }\r\n            }\r\n            return indexOfGreatest;\r\n          }\r\n\r\n        const favKeyIndex = findIndexOfGreatest(keys)\r\n        const favKey = keyArr[favKeyIndex]\r\n        let faveMode\r\n        if (modes[0] === modes[1]){\r\n            faveMode= 'You like Major and Minor Keys equally '\r\n        } else if (modes[0] < modes[1]) {\r\n            faveMode= 'You prefer Minor Keys'\r\n        } else {\r\n            faveMode= 'You prefer Major Keys'\r\n        }\r\n        const favTempo = Object.keys(tempos).reduce((a, b)=>{ return tempos[a] > tempos[b] ? a : b });\r\n        let speed;\r\n        if (favTempo < 71) {\r\n            speed = 'slow';\r\n        } else if (favTempo < 121) {\r\n            speed = 'walking pace';\r\n        } else if (favTempo < 180) {\r\n            speed = 'fast';\r\n        } else {\r\n            speed = 'very fast';\r\n        }\r\n\r\n        return (\r\n            <>\r\n        <div className='graphContainer'>\r\n            <div id=\"donut\">\r\n                <p>Your favorite songs are in the key of {favKey}</p>\r\n            <Doughnut\r\n                data={keyData}\r\n                height={400}\r\n                width={400}\r\n                options={{ maintainAspectRatio: true,\r\n                responsive: false,\r\n                \r\n                 legend: {\r\n                 display: false   \r\n                 }\r\n                }}\r\n                />\r\n            </div>\r\n            <div id='modeChart'>\r\n                {faveMode}\r\n                <Bar\r\n                height={400}\r\n                width={400}\r\n                    data={modeData}\r\n                    options={modeOptions}\r\n                    />\r\n\r\n            </div>\r\n            <div id='tempoChart'>\r\n                <p>You prefer {speed} music ({favTempo} bpm)</p>\r\n                <Bar\r\n                height={400}\r\n                width={400}\r\n                    data={tempoData}\r\n                    options={tempoOptions}\r\n                    />\r\n\r\n            </div>\r\n            <br/>\r\n\r\n        </div>\r\n\r\n        {!!dynoData ? console.log(dynoData) : console.log('huh')}\r\n            <DynoGraph dynoData={dynoData} />\r\n        </>\r\n        )\r\n    }\r\n}\r\n","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/dataSelector/dataSelector_container.js",[],"/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/splash/splash.jsx",["81"],"import React from 'react';\r\n\r\n\r\nexport default () => (\r\n    <>\r\n        <h1>Statify</h1>\r\n        <h2>View and compare stats about your musical taste</h2>\r\n\r\n        { process.env.NODE_ENV === 'production' ? \r\n        (\r\n        <a href='https://statifymusic.herokuapp.com/login' > Login to Spotify </a>\r\n        ):(\r\n        <a href='http://localhost:8000/login' > Login to Spotify </a>\r\n        )\r\n    }\r\n    \r\n    \r\n    </>\r\n)","/mnt/c/Users/Chris/Desktop/statify/frontend/src/components/graph/dynoGraph.jsx",["82","83"],"import React, {useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { Doughnut, Bar } from 'react-chartjs-2';\r\n\r\nexport default ({dynoData}) => {\r\n\r\n    const [dyno, setDyno] = useState('acousticness')\r\n    \r\n\r\n    const tracks = useSelector(state => state.entities.tracks)\r\n\r\n    const oneFive = n => {  //16\r\n        n -= (n % 5)  //15\r\n        return (n / 5); //3\r\n    }\r\n    \r\n    const popularity = new Array(20).fill(0);\r\n    \r\n\r\n    if (tracks[0])\r\n        Object.values(tracks).forEach(item => {\r\n            if (item.hasOwnProperty('popularity')) popularity[oneFive(item.popularity)]++;\r\n            else popularity[oneFive(item.track.popularity)]++\r\n        });\r\n        dynoData['popularity'] = popularity;\r\n\r\n    window.tracks = tracks\r\n    window.dynoData = dynoData\r\n    useEffect(() => {\r\n        const selector = document.getElementById('selectDyno')\r\n        selector.childNodes.forEach(button => {\r\n            if (button.value === dyno) button.className = button.value + ' selected'\r\n            else button.className = button.value    \r\n        });\r\n    });\r\n\r\n    const labels = []\r\n    for (let i = 0; i < 100; i += 5){\r\n        labels.push(i / 100)\r\n    }\r\n    const currentData = {\r\n        labels,\r\n        datasets: [{\r\n            data: dynoData[dyno],\r\n            backgroundColor: '#e6194B',\r\n        }]\r\n    };\r\n    const dynoOptions = {\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    suggestedMax: 10\r\n                }\r\n            }]\r\n        },\r\n        responsive: false,\r\n        maintainAspectRatio: true,\r\n        legend: {\r\n            display: false   \r\n            }\r\n    };\r\n    window.dynoData = dynoData\r\n    window.dyno = dyno\r\n    return (\r\n        <>\r\n        <div id='selectDyno'>\r\n            <button value='acousticness' onClick={() => setDyno('acousticness')}>Acousticness</button>\r\n            <button value='danceability' onClick={() => setDyno('danceability')}>Danceability</button>\r\n            <button value='energy' onClick={() => setDyno('energy')}>Energy</button>\r\n            <button value='instrumentalness' onClick={() => setDyno('instrumentalness')}>Instrumentalness</button>\r\n            <button value='liveness' onClick={() => setDyno('liveness')}>Liveness</button>\r\n            <button value='speechiness' onClick={() => setDyno('speechiness')}>Speechiness</button>\r\n            <button value='valence' onClick={() => setDyno('valence')}>Valence</button>\r\n            <button value='popularity' onClick={() => setDyno('popularity')}>Popularity</button>\r\n        </div>\r\n        <div className='dynoGraph'>\r\n        <Bar \r\n        data={currentData}\r\n        options={dynoOptions}\r\n        height={400}\r\n        width={700}\r\n        ></Bar>\r\n\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}",{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":108,"column":13,"nodeType":"94","endLine":108,"endColumn":81},{"ruleId":"88","severity":1,"message":"95","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":21},{"ruleId":"96","severity":1,"message":"97","line":9,"column":1,"nodeType":"98","endLine":24,"endColumn":2},{"ruleId":"96","severity":1,"message":"99","line":11,"column":1,"nodeType":"98","endLine":27,"endColumn":2},{"ruleId":"88","severity":1,"message":"89","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":18},{"ruleId":"88","severity":1,"message":"100","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":13},{"ruleId":"88","severity":1,"message":"101","line":27,"column":13,"nodeType":"90","messageId":"91","endLine":27,"endColumn":21},{"ruleId":"88","severity":1,"message":"102","line":28,"column":13,"nodeType":"90","messageId":"91","endLine":28,"endColumn":22},{"ruleId":"96","severity":1,"message":"97","line":4,"column":1,"nodeType":"98","endLine":19,"endColumn":2},{"ruleId":"88","severity":1,"message":"103","line":3,"column":10,"nodeType":"90","messageId":"91","endLine":3,"endColumn":18},{"ruleId":"96","severity":1,"message":"97","line":5,"column":1,"nodeType":"98","endLine":89,"endColumn":2},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'spotifyApi' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'SpotifyWebApi' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous function","'Graph' is defined but never used.","'loudness' is assigned a value but never used.","'duaration' is assigned a value but never used.","'Doughnut' is defined but never used.","no-global-assign","no-unsafe-negation"]