[{"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/index.js":"1","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reportWebVitals.js":"2","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/App.js":"3","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/store/store.js":"4","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/util/spotify_api_util.js":"5","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/dataSelector/dataSelector_container.js":"6","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/tracks/track_component.js":"7","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/actions/spotify_actions.js":"8","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reducers/root_reducer.js":"9","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/graph_container.js":"10","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/splash/splash.jsx":"11","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reducers/session_reducer.js":"12","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reducers/spotify_reducer.js":"13","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/tracks/tracks.jsx":"14","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/dataSelector/dataSelector.jsx":"15","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/graph.jsx":"16","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/dynoGraph.jsx":"17","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/dynoText.js":"18","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/tracks/single_track_data.jsx":"19"},{"size":841,"mtime":1611261795320,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1607965629516,"results":"22","hashOfConfig":"21"},{"size":5785,"mtime":1611874172167,"results":"23","hashOfConfig":"21"},{"size":532,"mtime":1611261795323,"results":"24","hashOfConfig":"21"},{"size":120,"mtime":1608862704950,"results":"25","hashOfConfig":"21"},{"size":721,"mtime":1610054025350,"results":"26","hashOfConfig":"21"},{"size":357,"mtime":1611261795318,"results":"27","hashOfConfig":"21"},{"size":4582,"mtime":1611261795313,"results":"28","hashOfConfig":"21"},{"size":224,"mtime":1608862704950,"results":"29","hashOfConfig":"21"},{"size":200,"mtime":1608862704949,"results":"30","hashOfConfig":"21"},{"size":639,"mtime":1611261795317,"results":"31","hashOfConfig":"21"},{"size":597,"mtime":1610477814340,"results":"32","hashOfConfig":"21"},{"size":688,"mtime":1611261795323,"results":"33","hashOfConfig":"21"},{"size":3603,"mtime":1611874228424,"results":"34","hashOfConfig":"21"},{"size":2640,"mtime":1611851044882,"results":"35","hashOfConfig":"21"},{"size":7419,"mtime":1611867536493,"results":"36","hashOfConfig":"21"},{"size":3452,"mtime":1611261795315,"results":"37","hashOfConfig":"21"},{"size":2885,"mtime":1610477814338,"results":"38","hashOfConfig":"21"},{"size":3077,"mtime":1611879322279,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1h2es54",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"42"},"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/index.js",[],["91","92"],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reportWebVitals.js",[],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/App.js",["93","94","95","96","97","98","99","100","101"],"import React from 'react';\nimport spotifyApi from '../src/util/spotify_api_util';\nimport {setAccessToken, logout} from '../src/actions/spotify_actions'\nimport {connect} from 'react-redux';\nimport DataSelector from '../src/components/dataSelector/dataSelector_container'\nimport Graph from '../src/components/graph/graph_container';\nimport Axios from 'axios';\nimport Splash from './components/splash/splash';\nimport Tracks from './components/tracks/track_component'\n\n\n// import './assets/css/fonts.css';\nconst mSTP = state => {\n  return ({\n    loggedIn: state.session.isAuthenticated,\n    username: state.session.username,\n    profpic: state.session.profpic,\n    errors: state.session.errors\n  })\n}\n\nconst mDTP = dispatch => {\n\n  return ({\n  setAccessToken: accessToken => dispatch(setAccessToken(accessToken)),\n  logout: () => dispatch(logout())\n})\n}\n\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    const params = this.getHashParams();\n    const token = params.access_token\n    if(token){\n      this.props.setAccessToken(token)\n    }\n\n\n    this.state = {\n      dropdown: false,\n      modal: false\n    }\n    \n    this.startCycle = this.startCycle.bind(this)\n    window.state = this.state;\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(2);\n    \n    e = r.exec(q)\n    while ( e ) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    \n    return hashParams;\n  }\n  toggleDropdown () {\n    this.setState({dropdown: !this.state.dropdown})\n  }\n  \n  openModal () {\n    this.setState({modal: true, dropdown: false})\n  }\n  closeModal () {\n    this.setState({modal: false})\n  }\n\n  startCycle () {\n    const refresh = this.state.params.refresh_token;\n    const setAuthToken = this.props.setAccessToken;\n    setTimeout(() => {\n      Axios.get('http://localhost:8000/refresh_token', {\n        params: {\n          refresh_token: refresh\n        }\n      }).then(function ({data}) {\n        \n        setAuthToken(data.access_token)\n      }).catch(err => console.log(err));\n      \n    }, 1000)\n      \n  }\n    \n\n  \n\n  \n  render() {\n    \n    if (!this.props.loggedIn) return <Splash message={this.props.errors}/>\n\n    \n\n    return (\n      <div className=\"App\">\n       \n        <div className='navbar'>\n          <div className='left'>\n            <h1>Statify</h1>\n          </div>\n          <div className='right' onClick={() => this.toggleDropdown()}> \n            <img src={this.props.profpic} ></img>\n            <p onClick={() => this.toggleDropdown()}>\n            {this.props.username}\n            </p>\n          </div>\n\n        </div>\n\n        {!this.state.dropdown ? null : (\n          <div className='dropdown-content'>\n\n            <button onClick={() => this.openModal()}> About</button>      \n            <button onClick={() => this.props.logout()}> Logout</button>      \n            {/* <button onClick={() => this.startCycle()}> Start Refresh Cycle</button>   */}\n            <form action=\"https://www.spotify.com/us/account/apps/\">\n            <button type='submit'>\n            <a>Remove Statify account</a>\n              </button>    \n            </form>\n          </div>\n        )}\n        \n        {!this.state.modal ? null : (\n          <div className='modal-background' onClick={() => this.closeModal()}>\n            <div className='modal-wrapper'>\n            <div className='modal' onClick={e => e.stopPropagation()}>\n              <c onClick={() => this.closeModal()}>close (x)</c>\n              <li>\n              <h1>About Statify</h1>\n                <h3>Overview</h3>\n                <p>Statify is a web app that uses Spotify API to connect to your Spotify account and display graphs with data pulled from your listening history, saved tracks, and playlists.</p>\n              </li>\n              <li>\n                <h3>Developers</h3>\n                <li className='dev'><b>Chris Bram</b> <br></br>\n                <a target='_blank' href='https://www.linkedin.com/in/chris-bram-522a661b9/'>LinkedIn</a>\n                <a target='_blank' href='https://github.com/cpbram2011'>Github</a>\n                <a target='_blank' href='https://cpbram2011.github.io/'>Portfolio Site</a>\n                </li>\n                <br></br>\n                <li className='dev'><b>Michael Wideburg</b> <br></br>\n                  <a target='_blank' href='https://www.linkedin.com/in/michael-wideburg-01331b34/'>LinkedIn</a>\n                  <a target='_blank' href='https://github.com/mwideburg'>Github</a>\n                  <a target='_blank' href='https://mwideburg.github.io/'>Portfolio Site</a>\n\n\n                </li>\n              </li>\n              <br></br>\n              <li>\n              \n              <h1>F.A.Q.</h1> \n                <h3>Is it secure?</h3>\n                <p>Statify adheres to all the latest standards in web security. And as logging in to Statify is handled by Spotify, it's as secure as logging in to Spotify itself.</p>\n              </li>\n              <li>\n                <h3>How is my data used?</h3>\n                <p>To use Statify, you'll need to allow the app to have access to some of your account information. Your data is only used to calculate an average with which users can compare their own scores.</p>        \n              </li>\n              <li>\n                <h3>I have some other issue (or concern, compliment, maybe a suggestion)</h3>\n                <a href='mailto:cpbram2011@gmail.com'>Feel free to reach out via email!</a>\n              \n              </li>\n              <br></br>\n            </div>\n            </div>\n          </div>\n        )}\n        <DataSelector />\n        <Graph/>\n\n        <Tracks/>\n      </div>\n    );\n  }\n}\n\n\nexport default connect(mSTP, mDTP)(App)\n\n","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/store/store.js",[],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/util/spotify_api_util.js",[],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/dataSelector/dataSelector_container.js",[],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/tracks/track_component.js",["102","103","104","105","106"],"import { requestTopTracks, requestMostRecent, requestMySaved, requestPlaylists, requestPlaylistItems } from '../../actions/spotify_actions'\nimport { connect } from 'react-redux';\nimport Tracks from './tracks';\n\nconst mSTP = state => ({\n    tracks: state.entities.tracks,\n    features: state.entities.features\n})\n\n\n\nexport default connect(mSTP, null)(Tracks)","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/actions/spotify_actions.js",[],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reducers/root_reducer.js",[],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/graph_container.js",[],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/splash/splash.jsx",["107","108"],"import React from 'react';\r\nimport logo from './soundeq.png'\r\n\r\n\r\nexport default ({message}) => {\r\n    return (\r\n    <div className='splash'>\r\n        <h1>Statify</h1>\r\n        <h2>View and compare stats about your musical taste</h2>\r\n\r\n        { process.env.NODE_ENV === 'production' ? \r\n        (\r\n            <a href='https://statifymusic.herokuapp.com/login' > Login to Spotify </a>\r\n            ):(\r\n                <a href='http://localhost:8000/login' > Login to Spotify </a>\r\n                )\r\n            }\r\n            <img src={logo} className='splashimg'/>\r\n    <p>\r\n        {message}\r\n        </p>\r\n    \r\n    \r\n    </div>\r\n)}","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reducers/session_reducer.js",["109"],"\r\nimport { LOGIN, LOGOUT, RECEIVE_USER_DATA } from '../actions/spotify_actions';\r\n\r\nconst initialState = {\r\nisAuthenticated: false,\r\naccessToken: {},\r\nusername: '',\r\nprofpic: '',\r\nerrors: ''\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\nswitch (action.type) {\r\n  case LOGIN:\r\n    return {\r\n      isAuthenticated: true,\r\n      accessToken: action.accessToken\r\n    }\r\n  case RECEIVE_USER_DATA:\r\n    return Object.assign({}, state, action.userData)\r\n  \r\n    case LOGOUT:\r\n      initialState.errors = action.message;\r\n      return initialState;\r\n\r\n  default:\r\n    return state;\r\n}\r\n}","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/reducers/spotify_reducer.js",["110"],"import {RECEIVE_FEATURES, RECEIVE_PLAYLISTS, RECEIVE_TRACKS} from '../actions/spotify_actions'\r\n\r\nconst initialState = {\r\n    features: [],\r\n    tracks: [],\r\n    playlists: {}\r\n    };\r\n\r\nexport default (state = initialState, action) => {\r\n    let newState = Object.assign({}, state);\r\n    switch (action.type) {\r\n        case RECEIVE_FEATURES:\r\n            newState.features = action.features\r\n            return newState;\r\n        case RECEIVE_TRACKS:\r\n            newState.tracks = action.tracks\r\n            return newState;\r\n        case RECEIVE_PLAYLISTS:\r\n        newState.playlists = action.playlists\r\n        return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/tracks/tracks.jsx",["111","112","113","114","115","116","117"],"import React from 'react';\nimport SingleTrackData from './single_track_data.jsx'\nimport { useEffect } from 'react';\nimport DataSelector from '../dataSelector/dataSelector_container'\nexport default class Tracks extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            selectedTrack: this.props.tracks[0],\n            trackFeatures: this.props.features[0],\n        }\n        this.propagateTrackData = this.propagateTrackData.bind(this)\n    }\n\n    componentDidUpdate(prevProps){\n        if(prevProps != this.props){\n            this.setState({ selectedTrack: this.props.tracks[0], trackFeatures: this.props.features[0]})\n        }\n    }\n\n    propagateTrackData(track, features, id){\n        const lastEle = (this.state.selectedTrack === undefined) ? this.props.tracks[0].id : this.state.selectedTrack.id\n        const removeClassEle = document.getElementById(lastEle)\n        const addClassEle = document.getElementById(id)\n        \n        removeClassEle.classList.remove('selected-track')\n        addClassEle.classList.add('selected-track')\n\n        this.setState({selectedTrack: track, trackFeatures: features})\n    }\n    \n    render(){\n        \n        if(this.props.tracks.length < 1 || this.props.features.length < 1 || this.props.features.length !== this.props.tracks.length){\n        \n            return null;\n        }\n        \n        const keyArr = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B',];\n        const modes = ['Maj', 'Min']\n        \n        let features = this.props.features\n        let tracks = this.props.tracks.map((ele, i)=> {\n            let minutes = Math.floor((ele.duration_ms / 1000) / 60).toString()\n            let seconds = Math.floor((ele.duration_ms / 1000) % 60)\n            seconds = (seconds < 10) ? `0${seconds.toString()}` : seconds.toString()\n            const style = i === 0 ? \"selected-track\" : \"\"\n            return (\n                <li id={ele.id} key={ele.id} onClick={() => this.propagateTrackData(ele, features[i], ele.id)} className={style}>\n                <div className=\"track-div\">\n                    <div className=\"album-div\">\n                        <img className=\"album-art\" src={ele.album.images[0].url} alt=\"album art\"></img>\n                        <div className=\"song-info\">\n                            <p className='song-title'>\"{ele.name}\"</p>\n                            <p className=\"artist-name\">{ele.artists[0].name}</p>\n                        </div>\n                    </div>\n                    <div className=\"song-data\">\n                            <p className=\"song-title\"> {minutes}:{seconds}</p>\n                    </div>\n                    \n                </div>\n            </li>)\n        })\n\n        const selectedTrack = (this.state.selectedTrack === undefined) ? this.props.tracks[0] : this.state.selectedTrack\n        const trackFeatures = (this.state.trackFeatures === undefined) ? this.props.features[0] : this.state.trackFeatures\n\n        \n        return(\n            <>\n                \n            <div className=\"tracklist-section\">\n                \n                <div className=\"tracks-container\">\n                    <h1>Track List:</h1>\n                    <ul className=\"track-ul\">\n                    {tracks}\n                    </ul>\n                </div>\n                <div className=\"track-show-container\">\n                        \n                    <SingleTrackData track={this.state.selectedTrack} trackFeatures={this.state.trackFeatures}/>\n                </div>\n            </div>\n            </>\n        )\n    }\n\n    \n}","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/dataSelector/dataSelector.jsx",["118","119"],"import React from 'react';\r\nimport spotifyApi from '../../util/spotify_api_util'\r\nimport Graph from '../graph/graph_container';\r\n\r\nexport default class DataSelector extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: 'top',\r\n            time: 'medium_term'\r\n        };\r\n        this.getData = this.getData.bind(this);\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.props.requestPlaylists()\r\n    }\r\n\r\n    dataChange (e) {\r\n        this.setState({data: e.target.value})\r\n    }\r\n    timeChange (e) {\r\n        this.setState({time: e.target.value})\r\n    }\r\n\r\n    getData () {\r\n        switch (this.state.data) {\r\n            case 'recent':\r\n                this.props.requestMostRecent(this.state.time)\r\n                break;\r\n            case 'top':\r\n                this.props.requestTopTracks(this.state.time)\r\n                break;\r\n            case 'liked':\r\n                this.props.requestMySaved(this.state.time)\r\n                break;\r\n        \r\n            default:\r\n                this.props.requestPlaylistItems(this.state.data)\r\n                break;\r\n        }\r\n    }\r\n\r\n    render () {\r\n        this.getData()\r\n\r\n        const playlistOptions = Object.keys(this.props.playlists).map((k) => (\r\n            <option value={this.props.playlists[k]} key={this.props.playlists[k]}>{k}</option>\r\n        ))\r\n        return (\r\n            <>\r\n            <div className='dataSelector'> \r\n                <p>Based on your</p>\r\n               \r\n                <select onChange={this.dataChange.bind(this)} value={this.state.data}>\r\n                    <option value=\"top\">Top Tracks</option>\r\n                    <option value=\"recent\">Most Recent Tracks</option>\r\n                    <option value=\"liked\">Liked Tracks</option>\r\n                    <option value=\"playlist\" disabled>— Playlists —</option>\r\n                    {playlistOptions}\r\n                </select>\r\n                {this.state.data.length > 9 ? (\r\n                    <p>playlist</p>\r\n                ) : null }\r\n                \r\n                {this.state.data === 'top' ? (\r\n                    <>\r\n                    <p>from the past </p>\r\n                    <select onChange={this.timeChange.bind(this)} value={this.state.time}>\r\n                    <option value=\"short_term\">4 weeks</option>\r\n                    <option value=\"medium_term\">6 months</option>\r\n                    <option value=\"long_term\">All time</option>\r\n                    </select>\r\n                    </>\r\n                ) : null}\r\n\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/graph.jsx",["120","121"],"\nimport React from 'react';\nimport { Doughnut, Bar } from 'react-chartjs-2';\n import DynoGraph from './dynoGraph';\nexport default class Graph extends React.Component {\n    \n\n    render ()  {\n        if (!this.props.data) return null;\n\n\n        let keys = [0,0,0,0,0,0,0,0,0,0,0,0];\n        const keyArr = ['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B',];\n        let modes = [0,0];\n        let tempos = {};\n        for (let i = 40; i < 241; i += 10) tempos[i] = 0;\n\n\n        //\n        let acousticness = new Array(20).fill(0);\n        let danceability = new Array(20).fill(0);\n        let energy = new Array(20).fill(0);\n        let instrumentalness = new Array(20).fill(0);\n        let liveness = new Array(20).fill(0);\n        let speechiness = new Array(20).fill(0);\n        let valence = new Array(20).fill(0);\n\n        let loudness = new Array(20).fill(0); //roughly -30 to 0\n        let duaration = new Array(20).fill(0);//in ms\n\n\n        const zeroFive = n => {  //.169\n            n = Math.floor(n * 100)   //16\n            n -= (n % 5)  //15\n            return (n / 5);\n        }\n        //main iterator\n        this.props.data.forEach(x => {\n            if (!x) {\n            } else {\n                keys[x.key] += 1;\n                modes[x.mode] += 1;\n                let tempo = Math.floor(x.tempo);\n                tempo -= (tempo % 10)\n                tempos[tempo] += 1\n\n                acousticness[zeroFive(x.acousticness)]++;\n                danceability[zeroFive(x.danceability)]++;\n                energy[zeroFive(x.energy)]++;\n                instrumentalness[zeroFive(x.instrumentalness)]++;\n                liveness[zeroFive(x.liveness)]++;\n                speechiness[zeroFive(x.speechiness)]++;\n                valence[zeroFive(x.valence)]++;\n            }\n\n        });\n        const dynoData = {\n            acousticness,\n            danceability,\n            energy,\n            instrumentalness,\n            liveness,\n            speechiness,\n            valence\n        }\n\n        //graph datasets\n        const keyData = {\n            labels: keyArr,\n            datasets: [{\n                data: keys,\n                backgroundColor: [\n                    '#e6194B',\n                    '#f58231',\n                    '#ffe119',\n                    '#bfef45',\n                    '#3cb44b',\n                    '#469990',\n                    '#42d4f4',\n                    '#4363d8',\n                    '#000075',\n                    '#911eb4',\n                    '#f032e6',\n                    '#b20035',\n                  ],\n            }]\n        };\n\n        const modeData = {\n            labels: ['Major', 'Minor'],\n            datasets: [{\n                data: modes,\n                backgroundColor: [\n                    '#e6194B',\n                    '#4363d8',\n                ]\n            }]\n        };\n        \n        //TODO move gradient WETness\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d')\n        canvas.width = 300;\n        canvas.height = 300;\n        var gradient = context.createLinearGradient(0, 0, 300, 0);\n        gradient.addColorStop(0, \"rgb(0, 77, 255)\");\n        gradient.addColorStop(0.5505050505050505, \"rgb(114, 255, 86)\");\n        gradient.addColorStop(1, \"rgb(255, 20, 20)\");\n        context.fillStyle = gradient;\n        context.fillRect(0, 0, 300, 300);\n\n\n        const tempoData = {\n            labels: [40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220],\n            datasets: [{\n                data: Object.values(tempos),\n                backgroundColor: gradient\n            }]\n        };\n\n        //graph option objects\n        const modeOptions = {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true,\n                        suggestedMax: 10,\n                    },\n                    gridLines: {\n                        color: \"#969696\"\n                    }\n\n                }]\n            },\n            responsive: true,\n            maintainAspectRatio: true,\n            legend: {\n                display: false   \n                }\n        };\n\n        const tempoOptions = {\n            scales: {\n                yAxes: [{\n                    ticks: {\n                        beginAtZero: true,\n                        suggestedMax: 10\n                    },\n                    gridLines: {\n                        color: \"#969696\"\n                    }\n                }]\n            },\n            responsive: true,\n            maintainAspectRatio: true,\n            legend: {\n                display: false   \n                }\n        };\n        \n\n        //get average modes\n        const findIndexOfGreatest = (array) => {\n            var greatest;\n            var indexOfGreatest;\n            for (var i = 0; i < array.length; i++) {\n              if (!greatest || array[i] > greatest) {\n                greatest = array[i];\n                indexOfGreatest = [i];\n              } else if (array[i] === greatest) {\n                  indexOfGreatest.push(i)\n              }\n            }\n            return indexOfGreatest;\n          }\n\n        const favKeyIndex = findIndexOfGreatest(keys);\n        const favKey = favKeyIndex.map(x => keyArr[x]);\n        let faveMode\n        if (modes[0] === modes[1]){\n            faveMode= 'Equal Parts Major and Minor'\n        } else if (modes[0] < modes[1]) {\n            faveMode= 'Most Common Mode: Minor'\n        } else {\n            faveMode= 'Most Common Mode: Major'\n        }\n        const favTempo = Object.keys(tempos).reduce((a, b)=>{ return tempos[a] > tempos[b] ? a : b });\n        let speed;\n        if (favTempo < 71) {\n            speed = 'slow';\n        } else if (favTempo < 121) {\n            speed = 'walking pace';\n        } else if (favTempo < 180) {\n            speed = 'fast';\n        } else {\n            speed = 'very fast';\n        }\n\n        return (\n            <>\n        <div className='graphContainer'>\n            <div id=\"donut\">\n                <p>Most Common Key: {favKey.map((x, i) => i === favKey.length - 1 ? x : x + ' & ')}</p>\n            <Doughnut\n                data={keyData}\n                height={400}\n                width={420}\n                options={{ maintainAspectRatio: true,\n                    responsive: true,\n                    \n                    legend: {\n                        display: false   \n                    },\n                    elements: {\n                        arc: {\n                            borderWidth: 0\n                        }\n                    }\n                }}\n                />\n                <p id='keysig'>♯/♭</p>\n            </div>\n            <div id='modeChart'>\n                <p>{faveMode}</p>\n                <Bar\n                height={400}\n                width={420}\n                    data={modeData}\n                    options={modeOptions}\n                    />\n\n            </div>\n            <div id='tempoChart'>\n                <p>Average Tempo: {favTempo} bpm ({speed})</p>\n                <Bar\n                height={400}\n                width={420}\n                    data={tempoData}\n                    options={tempoOptions}\n                    />\n\n            </div>\n            <br/>\n\n        </div>\n\n            <DynoGraph dynoData={dynoData} />\n        </>\n        )\n    }\n}\n\n","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/dynoGraph.jsx",["122","123"],"import React, {useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { Doughnut, Bar } from 'react-chartjs-2';\r\nimport dynoDescriptions from './dynoText';\r\n\r\n\r\nexport default ({dynoData}) => {\r\n\r\n    const [dyno, setDyno] = useState('popularity')\r\n    \r\n\r\n    const tracks = useSelector(state => state.entities.tracks)\r\n\r\n    const oneFive = n => {  //16\r\n        n -= (n % 5)  //15\r\n        return (n / 5); //3\r\n    }\r\n\r\n    const labels = []\r\n    for (let i = 0; i < 100; i += 5){\r\n        labels.push(i / 100)\r\n    }\r\n\r\n    const avg = arr => {\r\n        let ans =  0;\r\n        let c = 0\r\n        arr.forEach((x,i) => {\r\n            ans += labels[i] * x;\r\n            c += x\r\n        });\r\n        ans /= c;\r\n        return Math.floor(ans * 100) / 100\r\n    }\r\n    \r\n    const popularity = new Array(20).fill(0);\r\n    \r\n\r\n    if (tracks[0])\r\n        tracks.forEach(item => {\r\n            popularity[oneFive(item.popularity)]++;\r\n        });\r\n        dynoData['popularity'] = popularity;\r\n\r\n    window.tracks = tracks\r\n    window.dynoData = dynoData\r\n    useEffect(() => {\r\n        const selector = document.getElementById('selectDyno')\r\n        selector.childNodes.forEach(button => {\r\n            if (button.value === dyno) button.className = button.value + ' selected'\r\n            else button.className = button.value    \r\n        });\r\n    });\r\n\r\n    \r\n    const currentData = {\r\n        labels,\r\n        datasets: [{\r\n            data: dynoData[dyno],\r\n            backgroundColor: '#ED45A7',\r\n        }]\r\n    };\r\n    const dynoOptions = {\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    suggestedMax: 10\r\n                },\r\n                gridLines: {\r\n                    color: \"#969696\"\r\n                }\r\n            }]\r\n        },\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n            display: false   \r\n            }\r\n    };\r\n    window.dynoData = dynoData\r\n    window.dyno = dyno\r\n    return (\r\n        <div className='dynoParent'>\r\n            \r\n        <div id='selectDyno'>\r\n            <button value='acousticness' onClick={() => setDyno('acousticness')}>Acousticness</button>\r\n            <button value='danceability' onClick={() => setDyno('danceability')}>Danceability</button>\r\n            <button value='energy' onClick={() => setDyno('energy')}>Energy</button>\r\n            <button value='instrumentalness' onClick={() => setDyno('instrumentalness')}>Instrumentalness</button>\r\n            <button value='liveness' onClick={() => setDyno('liveness')}>Liveness</button>\r\n            <button value='speechiness' onClick={() => setDyno('speechiness')}>Speechiness</button>\r\n            <button value='valence' onClick={() => setDyno('valence')}>Valence</button>\r\n            <button value='popularity' onClick={() => setDyno('popularity')}>Popularity</button>\r\n        </div>\r\n        <div className=\"centerDyno\">\r\n        <div className='dynoGraph'>\r\n        <Bar \r\n        data={currentData}\r\n        options={dynoOptions}\r\n        // height={400}\r\n        // width={700}\r\n        ></Bar>\r\n\r\n        </div>\r\n        <div className='dynoText'>\r\n            <p id=\"average\">Average {dyno}: {avg(dynoData[dyno])}</p>\r\n            <p className='descriptions'>\r\n                {dynoDescriptions(dyno)}\r\n            </p>\r\n\r\n        </div>\r\n       </div>\r\n        </div>\r\n    )\r\n}","/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/graph/dynoText.js",["124"],"export default selected => {\r\n    const descriptions = {\r\n        'acousticness': 'A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.',\r\n        'danceability': '\tDanceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.',\r\n        'energy': '\tEnergy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.',\r\n        'instrumentalness': '\tPredicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.',\r\n        'liveness': '\tDetects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.',\r\n        'speechiness': '\tSpeechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.',\r\n        'valence': '\tA measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).',\r\n        'popularity': 'The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. ',\r\n    };\r\n\r\n    return descriptions[selected]\r\n}",["125","126"],"/Users/michaelwideburg/Desktop/spotify_app/statify/frontend/src/components/tracks/single_track_data.jsx",["127"],"import { Radar } from 'react-chartjs-2'\n\n\nexport default ({track, trackFeatures}) => {\n    if(track.type === 'episode'){\n        \n        return (\n            <h1 className=\"episode\">\n                Sorry, this is not a song...\n            </h1>\n        )\n    }\n    if(track.type === 'track'){\n        if (trackFeatures === undefined || trackFeatures === null){\n        return null\n        }\n    }\n    const keyArr = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B',];\n    const modes = ['Maj', 'Min']\n    const albumArtUrl = track.album.images[0].url\n    \n    const trackData = [track.popularity / 10, \n        trackFeatures.liveness * 10, \n        trackFeatures.energy * 10, \n        trackFeatures.valence * 10, \n        trackFeatures.danceability * 10, \n        trackFeatures.instrumentalness * 10]\n        \n    const data = {\n        labels: ['Popularity', 'Liveness', 'Energy', 'Valence', 'Danceability', 'Instrumentalness'],\n        datasets: [\n            {\n                label: '1 to 10',\n                data: trackData,\n                backgroundColor: 'rgba(255, 99, 132, 0.5)',\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1,\n                \n             \n            },\n        ],\n    }\n\n    const options = {\n        scale: {\n            ticks: { beginAtZero: true, stepSize: 1},\n            labels: {fontSize: 20},\n            gridLines: { color: 'rgba(250, 250, 250, .6)', lineWidth:2, drawBorder: true, drawOnChartArea: true, drawTicks: true},\n            pointLabels: { fontSize: 20, fontColor: 'white'},\n            angleLines: { color: 'rgba(250, 250, 250, .6)', }\n        },\n        \n        \n    }\n    const openInNewTab = (url) => {\n        const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n        if (newWindow) newWindow.opener = null\n    }\n    return (\n        <div className=\"dynoTrack-container\">\n            <div className=\"album-info\">\n                \n                <div className=\"album-art-div\" onClick={() => openInNewTab(track.external_urls.spotify)}>\n                    <img src={albumArtUrl} alt=\"album\" className=\"dyno-albumart\"/>\n                    <p className=\"album-name-sm\"><b>{track.album.name}</b> \n                    <br/>\n                    by {track.artists[0].name}\n                    </p>\n                   \n                </div>\n                \n                <div className=\"album-data-div\">\n                    <h2>\"{track.name}\"</h2>\n                    <p>\n                        Tempo: {Math.floor(trackFeatures.tempo)} BPM\n                        <br/>\n                        Key: {keyArr[trackFeatures.key]} {modes[trackFeatures.mode]} \n                        <br/>\n                        Beats Per Bar: {trackFeatures.time_signature}\n                    </p>\n                    \n                    \n                </div>\n\n            </div>\n            <div >\n                <div className=\"radar\">\n\n                <Radar data={data} options={options} />\n                </div>\n\n            </div>\n        </div>\n    )\n\n}",{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":18},{"ruleId":"136","severity":1,"message":"137","line":110,"column":13,"nodeType":"138","endLine":110,"endColumn":44},{"ruleId":"139","severity":1,"message":"140","line":126,"column":13,"nodeType":"138","endLine":126,"endColumn":16},{"ruleId":"141","severity":1,"message":"142","line":145,"column":20,"nodeType":"143","endLine":145,"endColumn":35},{"ruleId":"141","severity":1,"message":"142","line":146,"column":20,"nodeType":"143","endLine":146,"endColumn":35},{"ruleId":"141","severity":1,"message":"142","line":147,"column":20,"nodeType":"143","endLine":147,"endColumn":35},{"ruleId":"141","severity":1,"message":"142","line":151,"column":22,"nodeType":"143","endLine":151,"endColumn":37},{"ruleId":"141","severity":1,"message":"142","line":152,"column":22,"nodeType":"143","endLine":152,"endColumn":37},{"ruleId":"141","severity":1,"message":"142","line":153,"column":22,"nodeType":"143","endLine":153,"endColumn":37},{"ruleId":"132","severity":1,"message":"144","line":1,"column":10,"nodeType":"134","messageId":"135","endLine":1,"endColumn":26},{"ruleId":"132","severity":1,"message":"145","line":1,"column":28,"nodeType":"134","messageId":"135","endLine":1,"endColumn":45},{"ruleId":"132","severity":1,"message":"146","line":1,"column":47,"nodeType":"134","messageId":"135","endLine":1,"endColumn":61},{"ruleId":"132","severity":1,"message":"147","line":1,"column":63,"nodeType":"134","messageId":"135","endLine":1,"endColumn":79},{"ruleId":"132","severity":1,"message":"148","line":1,"column":81,"nodeType":"134","messageId":"135","endLine":1,"endColumn":101},{"ruleId":"149","severity":1,"message":"150","line":5,"column":1,"nodeType":"151","endLine":25,"endColumn":3},{"ruleId":"136","severity":1,"message":"137","line":18,"column":13,"nodeType":"138","endLine":18,"endColumn":52},{"ruleId":"149","severity":1,"message":"152","line":12,"column":1,"nodeType":"151","endLine":29,"endColumn":2},{"ruleId":"149","severity":1,"message":"150","line":9,"column":1,"nodeType":"151","endLine":24,"endColumn":2},{"ruleId":"132","severity":1,"message":"153","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":19},{"ruleId":"132","severity":1,"message":"154","line":4,"column":8,"nodeType":"134","messageId":"135","endLine":4,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":16,"column":22,"nodeType":"157","messageId":"158","endLine":16,"endColumn":24},{"ruleId":"132","severity":1,"message":"159","line":39,"column":15,"nodeType":"134","messageId":"135","endLine":39,"endColumn":21},{"ruleId":"132","severity":1,"message":"160","line":40,"column":15,"nodeType":"134","messageId":"135","endLine":40,"endColumn":20},{"ruleId":"132","severity":1,"message":"161","line":66,"column":15,"nodeType":"134","messageId":"135","endLine":66,"endColumn":28},{"ruleId":"132","severity":1,"message":"162","line":67,"column":15,"nodeType":"134","messageId":"135","endLine":67,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":18},{"ruleId":"132","severity":1,"message":"163","line":3,"column":8,"nodeType":"134","messageId":"135","endLine":3,"endColumn":13},{"ruleId":"132","severity":1,"message":"164","line":28,"column":13,"nodeType":"134","messageId":"135","endLine":28,"endColumn":21},{"ruleId":"132","severity":1,"message":"165","line":29,"column":13,"nodeType":"134","messageId":"135","endLine":29,"endColumn":22},{"ruleId":"132","severity":1,"message":"166","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":18},{"ruleId":"149","severity":1,"message":"150","line":7,"column":1,"nodeType":"151","endLine":115,"endColumn":2},{"ruleId":"149","severity":1,"message":"150","line":1,"column":1,"nodeType":"151","endLine":14,"endColumn":2},{"ruleId":"128","replacedBy":"167"},{"ruleId":"130","replacedBy":"168"},{"ruleId":"149","severity":1,"message":"150","line":4,"column":1,"nodeType":"151","endLine":96,"endColumn":2},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"no-unused-vars","'spotifyApi' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'requestTopTracks' is defined but never used.","'requestMostRecent' is defined but never used.","'requestMySaved' is defined but never used.","'requestPlaylists' is defined but never used.","'requestPlaylistItems' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous function","'useEffect' is defined but never used.","'DataSelector' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'keyArr' is assigned a value but never used.","'modes' is assigned a value but never used.","'selectedTrack' is assigned a value but never used.","'trackFeatures' is assigned a value but never used.","'Graph' is defined but never used.","'loudness' is assigned a value but never used.","'duaration' is assigned a value but never used.","'Doughnut' is defined but never used.",["169"],["170"],"no-global-assign","no-unsafe-negation"]